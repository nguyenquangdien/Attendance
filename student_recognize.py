# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'StudentRecognize.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QTimer, QPoint, pyqtSignal, pyqtSlot
from PyQt5.QtGui import QFont, QPainter, QImage, QTextCursor
from PyQt5.QtWidgets import QApplication, QMainWindow, QMessageBox
from recognize_face import RecognizeFace
from image_widget import ImageWidget
from webcam import WebCamHandler
import queue
import cv2
import face_recognition
import constants
from student_recognize_window_ui import StudentRecognizeMainWindowUI

from db_access.student_repository import StudentRepository
from db_access.attendance_repository import AttendanceRepository
from db_access.class_repository import ClassRepository
from db_access.entities import StudentEntity, ClassEntity, AttendanceEntity
from datetime import date, datetime
import numpy as np

class StudentRecognizeMainWindow(QMainWindow, StudentRecognizeMainWindowUI):
    def __init__(self):
        super().__init__(None)
        self.setupUi(self)

        self.classRepository = ClassRepository(constants.DATABASE_FILE_PATH)
        self.studentRepository = StudentRepository(constants.DATABASE_FILE_PATH)
        self.attendanceRepository = AttendanceRepository(constants.DATABASE_FILE_PATH)

        self.webcamHandler = WebCamHandler()
        self.webcamHandler.imgSignal.connect(self.captureImageCallback)
        self.webcamHandler.imgSignal.connect(self.captureImageCallback)
 
        self.image_queue = queue.Queue()
        self.recognizeFace = RecognizeFace(self.image_queue)
        self.recognizeFace.recognizedSignal.connect(self.recognizeCallback)

        self.webcamHandler.start()
        self.recognizeFace.start()

    @pyqtSlot(np.ndarray)
    def captureImageCallback(self, image):
        #convert from BGR to RGB for dlib
        rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

        # display image to UI
        self.display_image(rgb_image, self.imgWidget) 
    
        # Push to queue
        self.image_queue.put(rgb_image)

    @pyqtSlot(bool, str)
    def recognizeCallback(self, result, student_id):
        result_text = ""
        if result:
            result_text = "Nhận dạng thành công"
        else:
            result_text = "Nhận dạng thất bại, vui lòng thử lại"

        # Get information of student
        students = self.studentRepository.get_by_student_id(student_id)
        if len(students) > 0:
            # get class name
            class_name = ""
            classes = self.classRepository.get_class(students[0].class_id)
            if len(classes) > 0:
                class_name = classes[0].name

            result_text += "\n"
            result_text += students[0].name + " - " + students[0].student_id + " - " + class_name

            # store in attendance table
            today = date.today()
            now = datetime.now()
            attendance = AttendanceEntity(None, today.strftime("%d/%m/%Y"), students[0].student_id, now.strftime("%d/%m/%Y %H:%M:%S"), None)
            self.attendanceRepository.add_attendance(attendance)

            # show to list
        else:
            print("Cannot found student info")    

        self.guideLabel.setText(result_text)
        with self.image_queue.mutex:
            self.image_queue.queue.clear()

    # Display an image, reduce size if required
    def display_image(self, img, display):
        h, w, ch = img.shape
        bytes_per_line = ch * w
        qimg = QImage(img.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        display.setImage(qimg)  
    
    def closeEvent(self, event):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Question)
        msg.setText("Bạn có muốn thoát chương trình hay không?")
        msg.setWindowTitle("Cảnh bảo")
        msg.setStandardButtons(QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel)
        result = msg.exec()
        if result == QMessageBox.Yes:
            self.webcamHandler.stop()
            self.recognizeFace.stop()
            event.accept()
        else:
            event.ignore()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    mainWindow = StudentRecognizeMainWindow()
    mainWindow.show()
    sys.exit(app.exec_())
