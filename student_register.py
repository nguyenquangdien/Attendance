# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'StudentRegister.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QTimer, QPoint, pyqtSignal
from PyQt5.QtGui import QFont, QPainter, QImage, QTextCursor
from PyQt5.QtWidgets import QApplication, QMainWindow, QTextEdit, QLabel, QDialog
from custom_dialog import CustomDialog
from register_face import RegisterFace
from db_access.student_repository import StudentRepository
from db_access.entities import StudentEntity

from webcam import WebCamHandler
from image_widget import ImageWidget
import constants

import cv2
import face_recognition
import queue
import os

IMG_FORMAT          = QImage.Format_RGB888
DISP_MSEC           = 50                # Delay between display cycles
DISP_SCALE          = 1                # Scaling factor for display image

class StudentRegisterDialog(QMainWindow):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(789, 499)
        self.formLayoutWidget = QtWidgets.QWidget(Dialog)
        self.formLayoutWidget.setGeometry(QtCore.QRect(20, 60, 311, 171))
        self.formLayoutWidget.setObjectName("formLayoutWidget")
        self.formLayout = QtWidgets.QFormLayout(self.formLayoutWidget)
        self.formLayout.setContentsMargins(0, 0, 0, 0)
        self.formLayout.setObjectName("formLayout")
        self.nameLabel = QtWidgets.QLabel(self.formLayoutWidget)
        self.nameLabel.setObjectName("nameLabel")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.nameLabel)
        self.nameLineEdit = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.nameLineEdit.setObjectName("nameLineEdit")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.nameLineEdit)
        self.idLabel = QtWidgets.QLabel(self.formLayoutWidget)
        self.idLabel.setObjectName("idLabel")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.idLabel)
        self.idLineEdit = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.idLineEdit.setObjectName("idLineEdit")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.idLineEdit)
        self.birthdayLabel = QtWidgets.QLabel(self.formLayoutWidget)
        self.birthdayLabel.setObjectName("birthdayLabel")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.birthdayLabel)
        self.birthdayDateEdit = QtWidgets.QDateEdit(self.formLayoutWidget)
        self.birthdayDateEdit.setObjectName("birthdayDateEdit")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.birthdayDateEdit)
        self.classLabel = QtWidgets.QLabel(self.formLayoutWidget)
        self.classLabel.setObjectName("classLabel")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.classLabel)
        self.classLineEdit = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.classLineEdit.setObjectName("classLineEdit")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.classLineEdit)
        self.imgWidget = ImageWidget(Dialog)
        self.imgWidget.setGeometry(QtCore.QRect(380, 60, 361, 271))
        self.imgWidget.setObjectName("imgWidget")
        self.guideLabel = QtWidgets.QLabel(Dialog)
        self.guideLabel.setGeometry(QtCore.QRect(380, 379, 331, 31))
        self.guideLabel.setObjectName("guideLabel")
        self.startBtn = QtWidgets.QPushButton(Dialog)
        self.startBtn.setGeometry(QtCore.QRect(370, 450, 93, 28))
        self.startBtn.setObjectName("startBtn")
        self.saveBtn = QtWidgets.QPushButton(Dialog)
        self.saveBtn.setGeometry(QtCore.QRect(480, 450, 93, 28))
        self.saveBtn.setObjectName("saveBtn")
        self.cancelBtn = QtWidgets.QPushButton(Dialog)
        self.cancelBtn.setGeometry(QtCore.QRect(610, 450, 93, 28))
        self.cancelBtn.setObjectName("cancelBtn")

        self.startBtn.clicked.connect(self.onClickedStartBtn)
        self.saveBtn.clicked.connect(self.onClickedSaveBtn)
        self.cancelBtn.clicked.connect(self.onClickedCancelBtn)


        self.image_queue = queue.Queue()
        self.webcamHandler = WebCamHandler()
        self.registerFace = RegisterFace(self.image_queue)

        self.cur_encoding_path = ""

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Đăng ký thông tin học sinh"))
        self.nameLabel.setText(_translate("Dialog", "Họ và Tên"))
        self.idLabel.setText(_translate("Dialog", "Mã học sinh"))
        self.birthdayLabel.setText(_translate("Dialog", "Ngày sinh"))
        self.classLabel.setText(_translate("Dialog", "Lớp học"))
        self.guideLabel.setText(_translate("Dialog", "Hướng dẫn sử dụng ..."))
        self.startBtn.setText(_translate("Dialog", "Lấy mẫu ảnh"))
        self.saveBtn.setText(_translate("Dialog", "Lưu"))
        self.cancelBtn.setText(_translate("Dialog", "Hủy"))

    def onClickedStartBtn(self):
        print("startBtn clicked")
        idStudent = self.idLineEdit.text()
        if idStudent is None or idStudent == "":
            return
        self.webcamHandler.startCapture(self.captureImageCallback)
        self.registerFace.start(idStudent, self.registerCallback)

    def captureImageCallback(self, image):
        #convert from BGR to RGB for dlib
        rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        # detect the (x,y)-coordinates of the bounding boxes
        # corresponding to each face in the input image
        # we are assuming the the boxes of faces are the SAME FACE or SAME PERSON
        boxes = face_recognition.face_locations(rgb_image, model=constants.DETECTION_METHOD)
        if len(boxes) > 0 :
            X = boxes[0][3] # left 
            Y = boxes[0][0] # top
            H = boxes[0][2] - boxes[0][0]
            W = boxes[0][1] - boxes[0][3]
            cropped_image = rgb_image[Y:Y+H, X:X+W]

            self.image_queue.put((cropped_image, boxes))

            self.show_image(image[Y-60:Y+H+60, X-40:X+W+40], self.imgWidget, DISP_SCALE)     

    def registerCallback(self, result, encode_file_path):
        result_text = ""
        if result:
            result_text = "Đăng ký thành công"
        else:
            result_text = "Đăng ký thất bại, vui lòng thử lại"

        self.guideLabel.setText(result_text)
        self.cur_encoding_path = encode_file_path

    # Fetch camera image from queue, and display it
    def show_image(self, image, display, scale):
        if image is not None and len(image) > 0:
            img = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            self.display_image(img, display, scale)
            

    # Display an image, reduce size if required
    def display_image(self, img, display, scale=1):
        #disp_size = img.shape[1]//scale, img.shape[0]//scale
        size = self.imgWidget.size()
        disp_size = size.width(), size.height()
        disp_bpl = disp_size[0] * 3
        img = cv2.resize(img, disp_size, interpolation=cv2.INTER_CUBIC)
        qimg = QImage(img.data, disp_size[0], disp_size[1], 
                      disp_bpl, IMG_FORMAT)
        display.setImage(qimg)    

    def onClickedSaveBtn(self):
        print("saveBtn clicked")
        # store to db
        idStudent = self.idLineEdit.text()
        student_repo = StudentRepository(constants.DATABASE_FILE_PATH)
        file_path = os.path.join(constants.ENCODING_FOLDER_PATH, idStudent + ".pkl")
        os.rename(self.cur_encoding_path, file_path)
        student_entity = StudentEntity(None, self.nameLineEdit.text(), self.birthdayDateEdit.text(), self.idLineEdit.text(), 1, file_path)
        student_repo.add_student(student_entity)

    def onClickedCancelBtn(self):
        print("cancelBtn clicked")
        self.webcamHandler.stopCapture()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = StudentRegisterDialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
